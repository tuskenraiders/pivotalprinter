#!/usr/bin/env ruby

# Script to generate PDF cards suitable for planning poker
# from Pivotal Tracker [http://www.pivotaltracker.com/] CSV export.

# Inspired by Bryan Helmkamp's http://github.com/brynary/features2cards/

# Example output: http://img.skitch.com/20100522-d1kkhfu6yub7gpye97ikfuubi2.png

# Original from http://ephemera.karmi.cz/post/622136360/create-printable-pdf-cards-for-your-pivotal-tracker-stor

require 'rubygems'
require 'pivotal-tracker'
require 'ostruct'
require 'term/ansicolor'
require 'prawn'
require 'prawn/layout/grid'
require 'spruz/xt/full'

class String; include Term::ANSIColor; end

config = ENV # TODO maybe preinitialize from a config file instead?

if config.key?('PIVOTAL_TOKEN')
  PivotalTracker::Client.token = config['PIVOTAL_TOKEN']   # Manually set API Token
elsif config.key?('PIVOTAL_LOGIN') and config.key?('PIVOTAL_PASSWORD')
  PivotalTracker::Client.token(config['PIVOTAL_LOGIN'], config['PIVOTAL_PASSWORD'])       # Automatically fetch API Token
else
  fail "require either PIVOTAL_TOKEN or PIVOTAL_LOGIN and PIVOTAL_PASSWORD as environment variable"
end
if config.key?('PIVOTAL_PROJECT_ID')
  project = PivotalTracker::Project.find(config['PIVOTAL_PROJECT_ID'])                     # find project with a given ID
else
  fail "require PIVOTAL_PROJECT_ID as environment variable"
end

stories = case ARGV.first
  when "current": PivotalTracker::Iteration.current(project).stories
  when "done"   : PivotalTracker::Iteration.done(project).stories
  when "backlog": PivotalTracker::Iteration.backlog(project).full? { |a| a.first.full?(:stories) }
  when /^\d+$/  : [project.stories.find(ARGV.first.to_i)]
  when "help"   : puts "usage:\n  > pivotalprint.rb current|done|backlog|story_id    # print corresponding stories\n"
end

class Card < OpenStruct
  def type
    @table[:type]
  end
end

# --- Create cards objects

cards = stories.map do |story|

  bgcolor = case story.estimate
    when 0: 'ccff66'
    when 1: '408000'
    when 2: '808000'
    when 3: 'ffcc66'
    when 5: 'ff8000'
    when 8: 'ff0000'
    else 'aa0000'
  end  
  attrs =  { :title  => story.name,
             :body   => story.description,
             :type   => story.story_type,
             :points => story.estimate,
             :bgcolor => bgcolor
           }
  attrs[:body] = attrs[:body].split("\n").first(4).join("\n")
  Card.new attrs
end

begin

Prawn::Document.generate("/tmp/stories.pdf", :page_layout => :landscape, :margin => [25, 25, 50, 25], :page_size   => 'A4') do |pdf|

    @num_cards_on_page = 0

    pdf.font "#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf"

    cards.each_with_index do |card, i|

      # --- Split pages
      if i > 0 and i % 4 == 0
        # puts "New page..."
        pdf.start_new_page
        @num_cards_on_page  = 1
      else
        @num_cards_on_page += 1
      end

      # --- Define 2x2 grid
      pdf.define_grid(:columns => 2, :rows => 2, :gutter => 42)
      # pdf.grid.show_all

      row    = (@num_cards_on_page+1) / 4
      column = i % 2

      padding = 12

      cell = pdf.grid( row, column )
      cell.bounding_box do

        pdf.stroke_color = "666666"
        pdf.stroke_bounds

        # --- Write content
        pdf.bounding_box [pdf.bounds.left+padding+50, pdf.bounds.top-padding], :width => cell.width-(padding*2)-50 do
          pdf.text card.title, :size => 14
          pdf.text "\n", :size => 14
          pdf.fill_color "444444"
          pdf.text card.body, :size => 8
          pdf.fill_color "000000"
        end

        x, y = 32, 205
        if card.type=="feature"
          
          pdf.fill_color card.bgcolor
          pdf.fill_circle_at [x,y], :radius => 25
          pdf.font_size = 36
          pdf.font "Helvetica", :style => :bold
          pdf.fill_color 'ffffff'
          pdf.draw_text "#{card.points}", :at => [x-10, y-12]
          pdf.fill_color '000000'
          pdf.font_size = 14
        else
          pdf.image open("#{File.dirname(__FILE__)}/../images/#{card.type}.png"), :position => 5, :vposition => 5          
        end
      end
    end

    # --- Footer
    pdf.number_pages "stories.pdf", [pdf.bounds.left,  -28]
    pdf.number_pages "<page>/<total>", [pdf.bounds.right-16, -28]
end

puts ">>> Generated PDF file in 'stories.pdf' with #{cards.size} stories".black.on_green
system "open /tmp/stories.pdf"

rescue Exception
  puts "[!] There was an error while generating the PDF file... What happened was:".white.on_red
  raise
end
